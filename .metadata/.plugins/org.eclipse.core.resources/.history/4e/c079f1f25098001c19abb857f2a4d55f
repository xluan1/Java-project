package net.longvan.training.spring.DemoController;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import net.longvan.training.spring.model.User;
import net.longvan.training.spring.repository.UserRepository;

@RestController
@RequestMapping("/users")
public class UserController {
	@Autowired
	private UserRepository repository;

	@GetMapping
	public ResponseEntity<List<User>> getAllUser() {
		return new ResponseEntity<>(repository.findAll(), HttpStatus.OK);
	}

	@GetMapping("/{id}")
	public ResponseEntity<?> getById(@PathVariable String id) {
		Optional<User> checkUser = repository.findById(id);
		if (checkUser.isPresent()) {
			return new ResponseEntity<>(checkUser.get(), HttpStatus.OK);
		}
		return new ResponseEntity<>("Không tìm thấy user: " + id, HttpStatus.NOT_FOUND);
	}

	@PostMapping
	public ResponseEntity<?> addUser(@RequestBody User user) {
		Optional<User> checkUser = repository.findById(user.getId());
		if (checkUser.isPresent()) {
			return new ResponseEntity<>("User đã tồn tại: " + user.getId(), HttpStatus.CONFLICT);
		}

		return new ResponseEntity<>(repository.save(user), HttpStatus.CREATED);
	}

	@PutMapping("/{id}")
	public ResponseEntity<?> updateUser(@RequestBody User user, @PathVariable String id) {
		Optional<User> checkUser = repository.findById(id);
		if (checkUser.isPresent()) {
			User updateUser = checkUser.get();
			updateUser.setAddress(user.getAddress());
			updateUser.setBirthDate(user.getBirthDate());
			updateUser.setDescription(user.getDescription());
			updateUser.setEmail(user.getEmail());
			updateUser.setGender(user.getGender());
			updateUser.setName(user.getName());
			updateUser.setPassword(user.getPassword());
			updateUser.setStatus(user.getStatus());
			return new ResponseEntity<>(checkUser.get(), HttpStatus.OK);
		}
		return new ResponseEntity<>("Không tìm thấy user: " + id, HttpStatus.NOT_FOUND);
	}
}
